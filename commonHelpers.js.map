{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('button');\nconst input = document.querySelector('#datetime-picker');\nconst daysEl = document.querySelector('.field [data-days]');\nconst hoursEl = document.querySelector('.field [data-hours]');\nconst minutesEl = document.querySelector('.field [data-minutes]');\nconst secondsEl = document.querySelector('.field [data-seconds]');\n\nlet userSelectedDate;\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const currentTime = new Date(Date.now());\n    if (selectedDates[0] > currentTime) {\n      startBtn.disabled = false;\n      userSelectedDate = selectedDates[0];\n      return;\n    } else {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: `topRight`,\n        color: `#EF4040`,\n        messageColor: '#FAFAFB',\n      });\n      startBtn.disabled = true;\n      \n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nstartBtn.addEventListener(`click`, startTimer);\n\n\nfunction startTimer(event) {\n\n  setInterval(() => {\n  const currentTime = new Date(Date.now());\n  const deltaTime = convertMs(userSelectedDate - currentTime);\n  startBtn.disabled = true;\n  input.disabled = true;\n  updateTimer(deltaTime);\n  }, 1000)\n\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value){\n  return String(value).padStart(2, `0`);\n}\n\nfunction updateTimer(time){\n const { days, hours, minutes, seconds } = time;\n daysEl.textContent = addLeadingZero(days);\n hoursEl.textContent = addLeadingZero(hours)\n minutesEl.textContent = addLeadingZero(minutes);\n secondsEl.textContent = addLeadingZero(seconds);\n}\n\n"],"names":["startBtn","input","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","options","selectedDates","currentTime","iziToast","flatpickr","startTimer","event","deltaTime","convertMs","updateTimer","ms","days","hours","minutes","seconds","addLeadingZero","value","time"],"mappings":"2GAMA,MAAMA,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAU,SAAS,cAAc,qBAAqB,EACtDC,EAAY,SAAS,cAAc,uBAAuB,EAC1DC,EAAY,SAAS,cAAc,uBAAuB,EAEhE,IAAIC,EACJN,EAAS,SAAW,GAEpB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAc,IAAI,KAAK,KAAK,IAAK,CAAA,EACvC,GAAID,EAAc,CAAC,EAAIC,EAAa,CAClCT,EAAS,SAAW,GACpBM,EAAmBE,EAAc,CAAC,EAClC,MACN,MACME,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,WACV,MAAO,UACP,aAAc,SACtB,CAAO,EACDV,EAAS,SAAW,EAGvB,CACH,EAEAW,EAAU,mBAAoBJ,CAAO,EAErCP,EAAS,iBAAiB,QAASY,CAAU,EAG7C,SAASA,EAAWC,EAAO,CAEzB,YAAY,IAAM,CAClB,MAAMJ,EAAc,IAAI,KAAK,KAAK,IAAK,CAAA,EACjCK,EAAYC,EAAUT,EAAmBG,CAAW,EAC1DT,EAAS,SAAW,GACpBC,EAAM,SAAW,GACjBe,EAAYF,CAAS,CACpB,EAAE,GAAI,CAET,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAM,CAC5B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASP,EAAYQ,EAAK,CACzB,KAAM,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAKG,EAC1CtB,EAAO,YAAcoB,EAAeJ,CAAI,EACxCf,EAAQ,YAAcmB,EAAeH,CAAK,EAC1Cf,EAAU,YAAckB,EAAeF,CAAO,EAC9Cf,EAAU,YAAciB,EAAeD,CAAO,CAC/C"}